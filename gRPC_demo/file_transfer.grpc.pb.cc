// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_transfer.proto

#include "file_transfer.pb.h"
#include "file_transfer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace filetransfer {

static const char* FileServer_method_names[] = {
  "/filetransfer.FileServer/getSlice",
  "/filetransfer.FileServer/getMetaData",
};

std::unique_ptr< FileServer::Stub> FileServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileServer::Stub> stub(new FileServer::Stub(channel));
  return stub;
}

FileServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getSlice_(FileServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMetaData_(FileServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileServer::Stub::getSlice(::grpc::ClientContext* context, const ::filetransfer::SliceRequest& request, ::filetransfer::Slice* response) {
  return ::grpc::internal::BlockingUnaryCall< ::filetransfer::SliceRequest, ::filetransfer::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSlice_, context, request, response);
}

void FileServer::Stub::experimental_async::getSlice(::grpc::ClientContext* context, const ::filetransfer::SliceRequest* request, ::filetransfer::Slice* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::filetransfer::SliceRequest, ::filetransfer::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSlice_, context, request, response, std::move(f));
}

void FileServer::Stub::experimental_async::getSlice(::grpc::ClientContext* context, const ::filetransfer::SliceRequest* request, ::filetransfer::Slice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::Slice>* FileServer::Stub::PrepareAsyncgetSliceRaw(::grpc::ClientContext* context, const ::filetransfer::SliceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::filetransfer::Slice, ::filetransfer::SliceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::Slice>* FileServer::Stub::AsyncgetSliceRaw(::grpc::ClientContext* context, const ::filetransfer::SliceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileServer::Stub::getMetaData(::grpc::ClientContext* context, const ::filetransfer::FileName& request, ::filetransfer::FileMetadata* response) {
  return ::grpc::internal::BlockingUnaryCall< ::filetransfer::FileName, ::filetransfer::FileMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMetaData_, context, request, response);
}

void FileServer::Stub::experimental_async::getMetaData(::grpc::ClientContext* context, const ::filetransfer::FileName* request, ::filetransfer::FileMetadata* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::filetransfer::FileName, ::filetransfer::FileMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMetaData_, context, request, response, std::move(f));
}

void FileServer::Stub::experimental_async::getMetaData(::grpc::ClientContext* context, const ::filetransfer::FileName* request, ::filetransfer::FileMetadata* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMetaData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::FileMetadata>* FileServer::Stub::PrepareAsyncgetMetaDataRaw(::grpc::ClientContext* context, const ::filetransfer::FileName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::filetransfer::FileMetadata, ::filetransfer::FileName, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMetaData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::FileMetadata>* FileServer::Stub::AsyncgetMetaDataRaw(::grpc::ClientContext* context, const ::filetransfer::FileName& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMetaDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::filetransfer::SliceRequest, ::filetransfer::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::SliceRequest* req,
             ::filetransfer::Slice* resp) {
               return service->getSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::filetransfer::FileName, ::filetransfer::FileMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::FileName* req,
             ::filetransfer::FileMetadata* resp) {
               return service->getMetaData(ctx, req, resp);
             }, this)));
}

FileServer::Service::~Service() {
}

::grpc::Status FileServer::Service::getSlice(::grpc::ServerContext* context, const ::filetransfer::SliceRequest* request, ::filetransfer::Slice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileServer::Service::getMetaData(::grpc::ServerContext* context, const ::filetransfer::FileName* request, ::filetransfer::FileMetadata* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace filetransfer

