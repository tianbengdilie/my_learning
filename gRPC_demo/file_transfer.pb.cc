// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer.proto

#include "file_transfer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace filetransfer {
constexpr SliceRequest::SliceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idx_(0)
  , offset_(0){}
struct SliceRequestDefaultTypeInternal {
  constexpr SliceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SliceRequestDefaultTypeInternal() {}
  union {
    SliceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SliceRequestDefaultTypeInternal _SliceRequest_default_instance_;
constexpr Slice::Slice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idx_(0)
  , offset_(0)
  , length_(0){}
struct SliceDefaultTypeInternal {
  constexpr SliceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SliceDefaultTypeInternal() {}
  union {
    Slice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SliceDefaultTypeInternal _Slice_default_instance_;
constexpr FileMetadata::FileMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blockcount_(0)
  , blocksize_(0)
  , filesize_(0){}
struct FileMetadataDefaultTypeInternal {
  constexpr FileMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileMetadataDefaultTypeInternal() {}
  union {
    FileMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
constexpr FileName::FileName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FileNameDefaultTypeInternal {
  constexpr FileNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileNameDefaultTypeInternal() {}
  union {
    FileName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileNameDefaultTypeInternal _FileName_default_instance_;
}  // namespace filetransfer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_file_5ftransfer_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_file_5ftransfer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_file_5ftransfer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_file_5ftransfer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filetransfer::SliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filetransfer::SliceRequest, idx_),
  PROTOBUF_FIELD_OFFSET(::filetransfer::SliceRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filetransfer::Slice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filetransfer::Slice, idx_),
  PROTOBUF_FIELD_OFFSET(::filetransfer::Slice, offset_),
  PROTOBUF_FIELD_OFFSET(::filetransfer::Slice, length_),
  PROTOBUF_FIELD_OFFSET(::filetransfer::Slice, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filetransfer::FileMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filetransfer::FileMetadata, blockcount_),
  PROTOBUF_FIELD_OFFSET(::filetransfer::FileMetadata, blocksize_),
  PROTOBUF_FIELD_OFFSET(::filetransfer::FileMetadata, filesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filetransfer::FileName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::filetransfer::SliceRequest)},
  { 7, -1, sizeof(::filetransfer::Slice)},
  { 16, -1, sizeof(::filetransfer::FileMetadata)},
  { 24, -1, sizeof(::filetransfer::FileName)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filetransfer::_SliceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filetransfer::_Slice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filetransfer::_FileMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filetransfer::_FileName_default_instance_),
};

const char descriptor_table_protodef_file_5ftransfer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023file_transfer.proto\022\014filetransfer\"+\n\014S"
  "liceRequest\022\013\n\003idx\030\001 \001(\005\022\016\n\006offset\030\002 \001(\005"
  "\"B\n\005Slice\022\013\n\003idx\030\001 \001(\005\022\016\n\006offset\030\002 \001(\005\022\016"
  "\n\006length\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\"G\n\014FileMeta"
  "data\022\022\n\nblockCount\030\001 \001(\005\022\021\n\tblockSize\030\002 "
  "\001(\005\022\020\n\010fileSize\030\003 \001(\005\"\n\n\010FileName2\220\001\n\nFi"
  "leServer\022=\n\010getSlice\022\032.filetransfer.Slic"
  "eRequest\032\023.filetransfer.Slice\"\000\022C\n\013getMe"
  "taData\022\026.filetransfer.FileName\032\032.filetra"
  "nsfer.FileMetadata\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_file_5ftransfer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5ftransfer_2eproto = {
  false, false, 388, descriptor_table_protodef_file_5ftransfer_2eproto, "file_transfer.proto", 
  &descriptor_table_file_5ftransfer_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_file_5ftransfer_2eproto::offsets,
  file_level_metadata_file_5ftransfer_2eproto, file_level_enum_descriptors_file_5ftransfer_2eproto, file_level_service_descriptors_file_5ftransfer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_file_5ftransfer_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_file_5ftransfer_2eproto);
  return descriptor_table_file_5ftransfer_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_file_5ftransfer_2eproto(&descriptor_table_file_5ftransfer_2eproto);
namespace filetransfer {

// ===================================================================

class SliceRequest::_Internal {
 public:
};

SliceRequest::SliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filetransfer.SliceRequest)
}
SliceRequest::SliceRequest(const SliceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:filetransfer.SliceRequest)
}

void SliceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(offset_));
}

SliceRequest::~SliceRequest() {
  // @@protoc_insertion_point(destructor:filetransfer.SliceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SliceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SliceRequest::ArenaDtor(void* object) {
  SliceRequest* _this = reinterpret_cast< SliceRequest* >(object);
  (void)_this;
}
void SliceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SliceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:filetransfer.SliceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SliceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filetransfer.SliceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filetransfer.SliceRequest)
  return target;
}

size_t SliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filetransfer.SliceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SliceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filetransfer.SliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SliceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SliceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filetransfer.SliceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filetransfer.SliceRequest)
    MergeFrom(*source);
  }
}

void SliceRequest::MergeFrom(const SliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filetransfer.SliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void SliceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filetransfer.SliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceRequest::CopyFrom(const SliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filetransfer.SliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceRequest::IsInitialized() const {
  return true;
}

void SliceRequest::InternalSwap(SliceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SliceRequest, offset_)
      + sizeof(SliceRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(SliceRequest, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Slice::_Internal {
 public:
};

Slice::Slice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filetransfer.Slice)
}
Slice::Slice(const Slice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:filetransfer.Slice)
}

void Slice::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(length_));
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:filetransfer.Slice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Slice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Slice::ArenaDtor(void* object) {
  Slice* _this = reinterpret_cast< Slice* >(object);
  (void)_this;
}
void Slice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Slice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:filetransfer.Slice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Slice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Slice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filetransfer.Slice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_length(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filetransfer.Slice)
  return target;
}

size_t Slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filetransfer.Slice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Slice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filetransfer.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  const Slice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Slice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filetransfer.Slice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filetransfer.Slice)
    MergeFrom(*source);
  }
}

void Slice::MergeFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filetransfer.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void Slice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filetransfer.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filetransfer.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {
  return true;
}

void Slice::InternalSwap(Slice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Slice, length_)
      + sizeof(Slice::length_)
      - PROTOBUF_FIELD_OFFSET(Slice, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Slice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileMetadata::_Internal {
 public:
};

FileMetadata::FileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filetransfer.FileMetadata)
}
FileMetadata::FileMetadata(const FileMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blockcount_, &from.blockcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&filesize_) -
    reinterpret_cast<char*>(&blockcount_)) + sizeof(filesize_));
  // @@protoc_insertion_point(copy_constructor:filetransfer.FileMetadata)
}

void FileMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blockcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filesize_) -
    reinterpret_cast<char*>(&blockcount_)) + sizeof(filesize_));
}

FileMetadata::~FileMetadata() {
  // @@protoc_insertion_point(destructor:filetransfer.FileMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FileMetadata::ArenaDtor(void* object) {
  FileMetadata* _this = reinterpret_cast< FileMetadata* >(object);
  (void)_this;
}
void FileMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:filetransfer.FileMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blockcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filesize_) -
      reinterpret_cast<char*>(&blockcount_)) + sizeof(filesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 blockCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blockSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fileSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filetransfer.FileMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blockCount = 1;
  if (this->blockcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_blockcount(), target);
  }

  // int32 blockSize = 2;
  if (this->blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_blocksize(), target);
  }

  // int32 fileSize = 3;
  if (this->filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_filesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filetransfer.FileMetadata)
  return target;
}

size_t FileMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filetransfer.FileMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 blockCount = 1;
  if (this->blockcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blockcount());
  }

  // int32 blockSize = 2;
  if (this->blocksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blocksize());
  }

  // int32 fileSize = 3;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filetransfer.FileMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const FileMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filetransfer.FileMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filetransfer.FileMetadata)
    MergeFrom(*source);
  }
}

void FileMetadata::MergeFrom(const FileMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filetransfer.FileMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockcount() != 0) {
    _internal_set_blockcount(from._internal_blockcount());
  }
  if (from.blocksize() != 0) {
    _internal_set_blocksize(from._internal_blocksize());
  }
  if (from.filesize() != 0) {
    _internal_set_filesize(from._internal_filesize());
  }
}

void FileMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filetransfer.FileMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMetadata::CopyFrom(const FileMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filetransfer.FileMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMetadata::IsInitialized() const {
  return true;
}

void FileMetadata::InternalSwap(FileMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileMetadata, filesize_)
      + sizeof(FileMetadata::filesize_)
      - PROTOBUF_FIELD_OFFSET(FileMetadata, blockcount_)>(
          reinterpret_cast<char*>(&blockcount_),
          reinterpret_cast<char*>(&other->blockcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileName::_Internal {
 public:
};

FileName::FileName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filetransfer.FileName)
}
FileName::FileName(const FileName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filetransfer.FileName)
}

void FileName::SharedCtor() {
}

FileName::~FileName() {
  // @@protoc_insertion_point(destructor:filetransfer.FileName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FileName::ArenaDtor(void* object) {
  FileName* _this = reinterpret_cast< FileName* >(object);
  (void)_this;
}
void FileName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileName::Clear() {
// @@protoc_insertion_point(message_clear_start:filetransfer.FileName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filetransfer.FileName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filetransfer.FileName)
  return target;
}

size_t FileName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filetransfer.FileName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filetransfer.FileName)
  GOOGLE_DCHECK_NE(&from, this);
  const FileName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filetransfer.FileName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filetransfer.FileName)
    MergeFrom(*source);
  }
}

void FileName::MergeFrom(const FileName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filetransfer.FileName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FileName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filetransfer.FileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileName::CopyFrom(const FileName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filetransfer.FileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileName::IsInitialized() const {
  return true;
}

void FileName::InternalSwap(FileName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileName::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filetransfer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::filetransfer::SliceRequest* Arena::CreateMaybeMessage< ::filetransfer::SliceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filetransfer::SliceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::filetransfer::Slice* Arena::CreateMaybeMessage< ::filetransfer::Slice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filetransfer::Slice >(arena);
}
template<> PROTOBUF_NOINLINE ::filetransfer::FileMetadata* Arena::CreateMaybeMessage< ::filetransfer::FileMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filetransfer::FileMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::filetransfer::FileName* Arena::CreateMaybeMessage< ::filetransfer::FileName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filetransfer::FileName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
